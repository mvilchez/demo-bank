/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.27).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.marino.demobank.api;

import com.marino.demobank.model.AccountModel;
import com.marino.demobank.model.AccountCreation;
import com.marino.demobank.model.DepositOrder;
import com.marino.demobank.model.OverallAccountPosition;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import javax.validation.Valid;
import javax.validation.constraints.NotNull;
import java.util.List;
import java.util.Map;

@Validated
@Api(value = "account", description = "the account API")
@RequestMapping(value = "/v1")
public interface AccountApi {

    @ApiOperation(value = "Add a new account to the bank", nickname = "addAccount", notes = "",
            authorizations = {
            @Authorization(value = "bank_auth", scopes = {
                    @AuthorizationScope(scope = "write:accounts", description = "modify accounts"),
                    @AuthorizationScope(scope = "read:accounts", description = "read accounts")
            })
    }, tags = {"account",})
    @ApiResponses(value = {
            @ApiResponse(code = 405, message = "Invalid input")})
    @RequestMapping(value = "/account",
            produces = {"application/json"},
            consumes = {"application/json"},
            method = RequestMethod.POST)
    ResponseEntity<Void> addAccount(@ApiParam(value = "Account object that needs to be added to the bank",
            required = true) @Valid @RequestBody AccountCreation body);


    @ApiOperation(value = "Deposit money into an account", nickname = "depositIntoAccount", notes = "",
            response = Integer.class, responseContainer = "Map", authorizations = {
            @Authorization(value = "bank_auth", scopes = {
                    @AuthorizationScope(scope = "write:accounts", description = "modify accounts"),
                    @AuthorizationScope(scope = "read:accounts", description = "read accounts")
            })
    }, tags = {"account",})
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "successful operation", response = Map.class,
                    responseContainer = "Map")})
    @RequestMapping(value = "/account/deposit",
            produces = {"application/json"},
            method = RequestMethod.POST)
    ResponseEntity<Map<String, Integer>> depositIntoAccount(@ApiParam(value = "Deposit order that contains " +
            "import and description of a deposit that will be added to an account", required = true) @Valid @RequestBody DepositOrder body);


    @ApiOperation(value = "Finds Accounts by user", nickname = "findByUser", notes = "One user id has to be" +
            " provided", response = AccountModel.class, responseContainer = "List", authorizations = {
            @Authorization(value = "bank_auth", scopes = {
                    @AuthorizationScope(scope = "write:accounts", description = "modify accounts"),
                    @AuthorizationScope(scope = "read:accounts", description = "read accounts")
            })
    }, tags = {"account",})
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "successful operation", response = AccountModel.class,
                    responseContainer = "List"),
            @ApiResponse(code = 400, message = "Invalid user id value")})
    @RequestMapping(value = "/account/findByUser",
            produces = {"application/json"},
            method = RequestMethod.GET)
    ResponseEntity<List<AccountModel>> findByUser(@NotNull @ApiParam(value = "user id value that need to be " +
            "considered for filter", required = true) @Valid @RequestParam(value = "userId", required =
            true) String userId);


    @ApiOperation(value = "View account details", nickname = "viewAccountDetails", notes = "", response =
            OverallAccountPosition.class, authorizations = {
            @Authorization(value = "bank_auth", scopes = {
                    @AuthorizationScope(scope = "read:accounts", description = "read accounts")
            })
    }, tags = {"account",})
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "successful operation", response =
                    OverallAccountPosition.class),
            @ApiResponse(code = 400, message = "Invalid account id value")})
    @RequestMapping(value = "/account/view",
            produces = {"application/json"},
            method = RequestMethod.GET)
    ResponseEntity<OverallAccountPosition> viewAccountDetails(@NotNull @ApiParam(value = "account id value " +
            "that need to be considered for filter", required = true) @Valid @RequestParam(value = "accountId", required = true) String accountId);

}
